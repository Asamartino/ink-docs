(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{109:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),d=r,h=p["".concat(o,".").concat(d)]||p[d]||b[d]||c;return n?a.a.createElement(h,i(i({ref:t},l),{},{components:n})):a.a.createElement(h,i({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<c;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},86:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),c=(n(0),n(109)),o={title:"Cross-Contract Calling",slug:"/basics/cross-contract-calling"},i={unversionedId:"basics/cross-contract-calling",id:"basics/cross-contract-calling",isDocsHomePage:!1,title:"Cross-Contract Calling",description:"In ink! contracts it is possible to call ink! messages and ink! constructors. So ink! constructors allow",source:"@site/docs/basics/cross-contract-calling.md",slug:"/basics/cross-contract-calling",permalink:"/ink-docs/basics/cross-contract-calling",editUrl:"https://github.com/ink-docs/edit/master/docs/basics/cross-contract-calling.md",version:"current",sidebar:"reference",previous:{title:"Trait Definitions",permalink:"/ink-docs/basics/trait-definitions"},next:{title:"Contract Testing",permalink:"/ink-docs/basics/contract-testing"}},s=[{value:"How it Works",id:"how-it-works",children:[]}],l={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"In ink! contracts it is possible to call ink! messages and ink! constructors. So ink! constructors allow\ndelegation and ink! messages can easily call other ink! messages.\nGiven another ink! contract like, we can call any of its functions."),Object(c.b)("p",null,"See our ",Object(c.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/paritytech/ink/blob/master/examples/delegator/lib.rs"}),Object(c.b)("inlineCode",{parentName:"a"},"delegator example contract")),"\nfor an elaborate example which uses cross-contract calling."),Object(c.b)("h3",{id:"how-it-works"},"How it Works"),Object(c.b)("p",null,"In order to deploy the delegator smart contract we first\nhave to manually put the code of the other contract, receive\nits code hash from the signalled event and put their code hash\ninto our calling smart contract."),Object(c.b)("p",null,"The calling contract looks like this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),'use ink_storage::Lazy;\nuse other_contract::OtherContract;\n\n//--snip--\n#[ink(storage)]\nstruct MyContract {\n    The other contract.\n    other_contract: Lazy<OtherContract>,\n}\n\nimpl MyContract {\n    Instantiate `MyContract with the given\n    sub-contract codes and some initial value.\n    #[ink(constructor)]\n    pub fn new(\n        other_contract_code_hash: Hash,\n    ) -> Self {\n        let other_contract = OtherContract::new(1337)\n            .endowment(total_balance / 4)\n            .code_hash(other_contract_code_hash)\n            .instantiate()\n            .expect("failed at instantiating the `OtherContract` contract");\n        Self {\n            other_contract\n        }\n    }\n\n    Calls the other contract.\n    #[ink(message)]\n    pub fn call_other_contract(&self) -> i32 {\n        self.other_contract.get_value()\n    }\n}\n//--snip--\n')),Object(c.b)("p",null,"It's ",Object(c.b)("inlineCode",{parentName:"p"},"Cargo.toml")," contains"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-toml"}),'other_contract = { path = "other_contract", default-features = false, features = ["ink-as-dependency"] }\n')),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"other_contract/Cargo.toml")," contains this:"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-toml"}),"[features]\nink-as-dependency = []\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{}),"Tells the ink! code generator to **always** or **never**\ncompile the smart contract as if it was used as a dependency of another ink!\nsmart contract.\n")),Object(c.b)("p",null,"The ",Object(c.b)("inlineCode",{parentName:"p"},"other_contract/lib.rs"),":"),Object(c.b)("pre",null,Object(c.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[ink::contract]\npub mod other_contract {\n    Storage for the other contract.\n    #[ink(storage)]\n    pub struct OtherContract {\n        value: i32,\n    }\n\n    impl OtherContract {\n        Initializes the contract.\n        #[ink(constructor)]\n        pub fn new(value: i32) -> Self {\n            Self { value }\n        }\n\n        Returns the current state.\n        #[ink(message)]\n        pub fn get_value(&self) -> i32 {\n            self.value\n        }\n    }\n}\n")))}u.isMDXComponent=!0}}]);