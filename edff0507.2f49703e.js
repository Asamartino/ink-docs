(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{80:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(6),o=(n(0),n(86)),c={title:"Storing Values",slug:"/basics/storing-values"},i={unversionedId:"basics/storing-values",id:"basics/storing-values",isDocsHomePage:!1,title:"Storing Values",description:"The first thing we are going to do to the contract template is introduce some storage values.",source:"@site/docs/basics/storing-values.md",slug:"/basics/storing-values",permalink:"/ink-docs/basics/storing-values",editUrl:"https://github.com/ink-docs/edit/master/docs/basics/storing-values.md",version:"current",sidebar:"reference",previous:{title:"Contract Template",permalink:"/ink-docs/basics/contract-template"},next:{title:"Reading Values from Storage",permalink:"/ink-docs/basics/reading-values"}},s=[{value:"Supported Types",id:"supported-types",children:[]},{value:"Contract Deployment",id:"contract-deployment",children:[]},{value:"Your Turn!",id:"your-turn",children:[]}],u={rightToc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"The first thing we are going to do to the contract template is introduce some storage values."),Object(o.b)("p",null,"Here is how you would store some simple values in storage:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[ink(storage)]\npub struct MyContract {\n    // Store a bool\n    my_bool: bool,\n    // Store some number\n    my_number: u32,\n}\n/* --snip-- */\n")),Object(o.b)("h2",{id:"supported-types"},"Supported Types"),Object(o.b)("p",null,"Contract may store types that are encodable and decodable with ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/paritytech/parity-codec"}),"Parity Codec")," which includes the most common types such as ",Object(o.b)("inlineCode",{parentName:"p"},"bool"),", ",Object(o.b)("inlineCode",{parentName:"p"},"u{8,16,32,64,128}"),", ",Object(o.b)("inlineCode",{parentName:"p"},"i{8,16,32,64,128}"),", ",Object(o.b)("inlineCode",{parentName:"p"},"String"),", tuples, and arrays."),Object(o.b)("p",null,"ink! provides smart contracts Substrate specific types like ",Object(o.b)("inlineCode",{parentName:"p"},"AccountId"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Balance"),", and ",Object(o.b)("inlineCode",{parentName:"p"},"Hash")," as if they were primitive types. Also ink! provides storage types for more elaborate storage interactions through the storage module:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"use ink_storage::collections::{Vec, HashMap, Stash, Bitvec};\n")),Object(o.b)("p",null,"Here is an example of how you would store an ",Object(o.b)("inlineCode",{parentName:"p"},"AccountId")," and ",Object(o.b)("inlineCode",{parentName:"p"},"Balance"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"// We are importing the default ink! types\nuse ink_lang as ink;\n\n#[ink::contract]\nmod MyContract {\n\n    // Our struct will use those default ink! types\n    #[ink(storage)]\n    pub struct MyContract {\n        // Store some AccountId\n        my_account: AccountId,\n        // Store some Balance\n        my_balance: Balance,\n    }\n    /* --snip-- */\n}\n")),Object(o.b)("p",null,"You can find all the supported Substrate types in ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/paritytech/ink/blob/master/crates/storage/src/lib.rs"}),Object(o.b)("inlineCode",{parentName:"a"},"crates/storage/src/lib.rs")),"."),Object(o.b)("h2",{id:"contract-deployment"},"Contract Deployment"),Object(o.b)("p",null,"Every ink! smart contract must have a constructor which is run once when a contract is created. ink! smart contracts can have multiple constructors:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"use ink_lang as ink;\n\n#[ink::contract]\nmod mycontract {\n\n    #[ink(storage)]\n    pub struct MyContract {\n        number: u32,\n    }\n\n    impl MyContract {\n        /// Constructor that initializes the `u32` value to the given `init_value`.\n        #[ink(constructor)]\n        pub fn new(init_value: u32) -> Self {\n            Self {\n                number: init_value,\n            }\n        }\n\n        /// Constructor that initializes the `u32` value to the `u32` default.\n        ///\n        /// Constructors can delegate to other constructors.\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self {\n                number: Default::default(),\n            }\n        }\n    /* --snip-- */\n    }\n}\n")),Object(o.b)("h2",{id:"your-turn"},"Your Turn!"),Object(o.b)("p",null,"Follow the ",Object(o.b)("inlineCode",{parentName:"p"},"ACTION"),"s in the template."),Object(o.b)("p",null,"Remember to run ",Object(o.b)("inlineCode",{parentName:"p"},"cargo +nightly test")," to test your work."))}l.isMDXComponent=!0},86:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),l=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,d=p["".concat(c,".").concat(m)]||p[m]||b[m]||o;return n?a.a.createElement(d,i(i({ref:t},u),{},{components:n})):a.a.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,c[1]=i;for(var u=2;u<o;u++)c[u]=n[u];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"}}]);