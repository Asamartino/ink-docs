"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[6477],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8831:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],c={title:"Dynamic Storage Allocator",slug:"/datastructures/dynamic-allocation"},s=void 0,l={unversionedId:"datastructures/dynamic-allocation",id:"datastructures/dynamic-allocation",isDocsHomePage:!1,title:"Dynamic Storage Allocator",description:"In the previous section we have seen how the default mode of operation is to spread information",source:"@site/docs/datastructures/dynamic-allocation.md",sourceDirName:"datastructures",slug:"/datastructures/dynamic-allocation",permalink:"/ink-docs/datastructures/dynamic-allocation",editUrl:"https://github.com/ink-docs/edit/master/docs/datastructures/dynamic-allocation.md",tags:[],version:"current",frontMatter:{title:"Dynamic Storage Allocator",slug:"/datastructures/dynamic-allocation"},sidebar:"reference",previous:{title:"Opt out of Storage",permalink:"/ink-docs/datastructures/opting-out"},next:{title:"Custom Datastructures",permalink:"/ink-docs/datastructures/custom-datastructure"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In the previous section we have seen how the default mode of operation is to spread information\nand how we can opt-in to pack information into single cells via ",(0,o.kt)("inlineCode",{parentName:"p"},"ink_storage::Packed"),"."),(0,o.kt)("p",null,"However, what if we wanted to store a vector of a vector of ",(0,o.kt)("inlineCode",{parentName:"p"},"i32")," for example?\nNaturally a user would try to construct this as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use ink_storage::Vec as StorageVec;\n\n#[ink(storage)]\npub struct Matrix {\n    values: StorageVec<StorageVec<i32>>,\n}\n")),(0,o.kt)("p",null,"However, this will fail compilation with an error indicating that ",(0,o.kt)("inlineCode",{parentName:"p"},"StorageVec<T>")," requires for its ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," to be packed (",(0,o.kt)("inlineCode",{parentName:"p"},"T: PackedLayout"),") which ",(0,o.kt)("inlineCode",{parentName:"p"},"StorageVec<T>")," itself does not since it always stores all of its elements into different cells. The same applies to many other storage data structures provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"ink_storage")," and is a trade-off the ink! team decided for the case of efficiency of the overall system.\nInstead what a user can do in order to get their vector-of-vector to be working is to make use of ink!'s dynamic storage allocator capabilities."),(0,o.kt)("p",null,"For this the contract author has to first enable the feature via:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use ink_lang as ink;\n\n#[ink::contract(dynamic_storage_allocator = true)]\nmod matrix {\n    // contract code ...\n}\n")),(0,o.kt)("p",null,"And then we can define our ",(0,o.kt)("inlineCode",{parentName:"p"},"Matrix")," ",(0,o.kt)("inlineCode",{parentName:"p"},"#[ink(storage)]")," as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"use ink_storage::{\n    Vec as StorageVec,\n    Box as StorageBox,\n};\n\n#[ink(storage)]\npub struct Matrix {\n    values: StorageVec<StorageBox<StorageVec<i32>>>,\n}\n")),(0,o.kt)("p",null,"With ",(0,o.kt)("inlineCode",{parentName:"p"},"ink_storage::Box<T>")," we can use a ",(0,o.kt)("inlineCode",{parentName:"p"},"T: SpreadLayout")," as if it was ",(0,o.kt)("inlineCode",{parentName:"p"},"T: PackedLayout")," since the ",(0,o.kt)("inlineCode",{parentName:"p"},"ink_storage::Box<T>")," itself suffices the requirements and can be put into a single contract storage cell. The whole concept works quite similar to how Rust's ",(0,o.kt)("inlineCode",{parentName:"p"},"Box")," works: by an indirection - contract authors are therefore advised to make use of dynamic storage allocator capabilities only if other ways of dealing with ones problems are not applicable."))}d.isMDXComponent=!0}}]);