"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1207],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),d=c(r),m=o,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},6294:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return l},default:function(){return d}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],u={title:"Opt out of Storage",slug:"/datastructures/opting-out"},s=void 0,c={unversionedId:"datastructures/opting-out",id:"datastructures/opting-out",title:"Opt out of Storage",description:"If you are in need of storing some temporary information across method and message",source:"@site/docs/datastructures/opting-out.md",sourceDirName:"datastructures",slug:"/datastructures/opting-out",permalink:"/ink-docs/datastructures/opting-out",editUrl:"https://github.com/ink-docs/edit/master/docs/datastructures/opting-out.md",tags:[],version:"current",frontMatter:{title:"Opt out of Storage",slug:"/datastructures/opting-out"},sidebar:"reference",previous:{title:"Spread Storage Layout",permalink:"/ink-docs/datastructures/spread-storage-layout"},next:{title:"Dynamic Storage Allocator",permalink:"/ink-docs/datastructures/dynamic-allocation"}},l=[],p={toc:l};function d(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you are in need of storing some temporary information across method and message\nboundaries ink! will have your back with the ",(0,a.kt)("inlineCode",{parentName:"p"},"ink_storage::Memory")," abstraction. It allows\nyou to simply opt-out of using the storage for the wrapped entity at all and thus is very\nsimilar to Solidity's very own ",(0,a.kt)("inlineCode",{parentName:"p"},"memory")," annotation."),(0,a.kt)("p",null,"An example below:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\npub struct OptedOut {\n    a: i32,\n    b: ink_storage::Memory<i32>,\n}\n")),(0,a.kt)("p",null,"The the above example ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," is a normal storage entry, however, ",(0,a.kt)("inlineCode",{parentName:"p"},"b")," on the other\nhand side will never load from or store to contract storage and will always be reset to\nthe default value of its ",(0,a.kt)("inlineCode",{parentName:"p"},"i32")," type for every contract call. It can be accessed from all\nink! messages or methods via ",(0,a.kt)("inlineCode",{parentName:"p"},"self.b"),", but will never manipulate the contract storage and\nthus acts wonderfully as some shared local information."))}d.isMDXComponent=!0}}]);