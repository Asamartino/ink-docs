"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[7578],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),f=a,h=d["".concat(c,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={title:"useTx",description:"A React hook for signing and sending a transaction for a contract and tracking state."},s="useTx",i={unversionedId:"frontend/core/hooks/contracts/use-tx",id:"frontend/core/hooks/contracts/use-tx",title:"useTx",description:"A React hook for signing and sending a transaction for a contract and tracking state.",source:"@site/docs/frontend/core/hooks/contracts/use-tx.md",sourceDirName:"frontend/core/hooks/contracts",slug:"/frontend/core/hooks/contracts/use-tx",permalink:"/frontend/core/hooks/contracts/use-tx",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/core/hooks/contracts/use-tx.md",tags:[],version:"current",frontMatter:{title:"useTx",description:"A React hook for signing and sending a transaction for a contract and tracking state."},sidebar:"reference",previous:{title:"useEvents",permalink:"/frontend/core/hooks/contracts/use-events"},next:{title:"useTxPaymentInfo",permalink:"/frontend/core/hooks/contracts/use-tx-payment-info"}},c={},l=[{value:"Basic Usage",id:"basic-usage",level:2},{value:"Return Value",id:"return-value",level:2},{value:"Transaction Statuses",id:"transaction-statuses",level:2},{value:"Want to Learn More?",id:"want-to-learn-more",level:2},{value:"Common Patterns With useTx",id:"common-patterns-with-usetx",level:2}],u={toc:l},d="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usetx"},"useTx"),(0,a.kt)("p",null,"A hook for sending a transaction for a contract and decoding successful responses or\nreceiving errors. This hook is used in combination with the result of\n",(0,a.kt)("a",{parentName:"p",href:"/frontend/core/hooks/contracts/use-contract"},"useContract"),"."),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/frontend/utils/helpers"},"useink/utils helpers")," for compatible functions that work\nwell with this hook. "),(0,a.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useTx, useContract, shouldDisable } from 'useink'\nimport { pickDecoded } from 'useink/utils'\nimport metadata from './metadata.json'\n\ninterface Result {\n  color: string;\n}\n\nexport const MyContractView: React.FC = () => {\n  const contract = useContract('..address', metadata)\n  const setColor = useTx<Result>(contract, 'setColor')\n  const args = ['blue']\n\n  return (\n    <>\n      <button onClick={() => setColor.signAndSend(args)} disable={shouldDisable(setColor)}>\n        {shouldDisable(setColor) ? 'Changing Color...' : 'Change Color'}\n      </button>\n\n      <h2>Get the result the hard way: {setColor.result.ok ? setColor.result.value.decoded.color : '--'}</h2>\n      <h2>Or the easy way: {pickDecoded(get.result)?.color || '--'}</h2>\n    </>\n  )\n}\n")),(0,a.kt)("h2",{id:"return-value"},"Return Value"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"export interface Tx<T> {\n  signAndSend: (\n    args?: unknown[],\n    options?: ContractOptions,\n    cb?: ContractSubmittableResultCallback,\n  ) => void;\n  status: Status;\n  result: ContractSubmittableResult | undefined;\n  resetState: () => void;\n}\n")),(0,a.kt)("h2",{id:"transaction-statuses"},"Transaction Statuses"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"useink")," extends transaction statuses defined in the Substrate ",(0,a.kt)("inlineCode",{parentName:"p"},"transaction-pool"),"\npallet. These are used for pre-transaction senarios such as awaiting signature in a\nwallet, dry runs, or handling a JavaScript error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"export type Status =\n  | 'None'             \n  | 'PendingSignature' // A user is prompted to sign a transaction in their wallet extension.\n  | 'DryRun'           // A pre-flight is being sent without any payments.\n  | 'Errored'          // A JavaScript error occured\n  | 'Future'           \n  | 'Ready'            \n  | 'Broadcast'        \n  | 'InBlock'          \n  | 'Retracted'        \n  | 'FinalityTimeout'  \n  | 'Finalized'        \n  | 'Usurped'          \n  | 'Dropped'          \n  | 'Invalid';          \n")),(0,a.kt)("h2",{id:"want-to-learn-more"},"Want to Learn More?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Learn more about ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/paritytech/substrate/blob/65e7ab604d109e316a69b8801c3b182a7fa46bcb/client/transaction-pool/api/src/lib.rs#L59"},"the Substrate transaction-pool")),(0,a.kt)("li",{parentName:"ul"},"Read ",(0,a.kt)("a",{parentName:"li",href:"https://docs.substrate.io/learn/transaction-lifecycle/"},"Substrate documentation")),(0,a.kt)("li",{parentName:"ul"},"Watch a ",(0,a.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=3pfM0GOp02c"},"video on transaction lifecycles"))),(0,a.kt)("h2",{id:"common-patterns-with-usetx"},"Common Patterns With useTx"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/frontend/core/utils/contracts/txUtils#shoulddisable"},"shouldDisable")," and\n",(0,a.kt)("a",{parentName:"p",href:"/frontend/core/utils/contracts/txUtils#shoulddisablestrict"},"shouldDisableStrict"),"."))}p.isMDXComponent=!0}}]);