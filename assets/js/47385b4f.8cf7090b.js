"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[8513],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=i,f=p["".concat(l,".").concat(d)]||p[d]||h[d]||o;return n?a.createElement(f,r(r({ref:t},u),{},{components:n})):a.createElement(f,r({ref:t},u))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,r[1]=s;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9213:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={title:"Contract Testing",slug:"/basics/contract-testing"},r=void 0,s={unversionedId:"basics/testing",id:"version-4.0.0-alpha.1/basics/testing",title:"Contract Testing",description:"ink! supports different stages of testing for different purposes.",source:"@site/versioned_docs/version-4.0.0-alpha.1/basics/testing.md",sourceDirName:"basics",slug:"/basics/contract-testing",permalink:"/4.0.0-alpha.1/basics/contract-testing",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-4.0.0-alpha.1/basics/testing.md",tags:[],version:"4.0.0-alpha.1",frontMatter:{title:"Contract Testing",slug:"/basics/contract-testing"},sidebar:"reference",previous:{title:"Metadata",permalink:"/4.0.0-alpha.1/metadata"},next:{title:"Contract Debugging",permalink:"/4.0.0-alpha.1/basics/contract-debugging"}},l={},c=[{value:"Unit Tests",id:"unit-tests",level:2},{value:"Off-chain Testing",id:"off-chain-testing",level:2},{value:"How do you find out if your test requires the off-chain environment?",id:"how-do-you-find-out-if-your-test-requires-the-off-chain-environment",level:3},{value:"Example",id:"example",level:3},{value:"End-to-End (E2E) Testing",id:"end-to-end-e2e-testing",level:2}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("img",{src:"/img/testing.png",alt:"Smart contracts parachain on Rococo"}),(0,i.kt)("p",null,"ink! supports different stages of testing for different purposes.\nOn this page we'll explain what each stage is about and how to use it."),(0,i.kt)("h2",{id:"unit-tests"},"Unit Tests"),(0,i.kt)("p",null,"Testing contracts off-chain is done by ",(0,i.kt)("inlineCode",{parentName:"p"},"cargo test")," and users can simply use the standard Rust\nroutines of creating unit test modules within the ink! project:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn my_test() { ... }\n}\n")),(0,i.kt)("p",null,"Test instances of contracts can be created with something like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let contract = MyContract::my_constructor(a, b);\n")),(0,i.kt)("p",null,"Messages can simply be called on the returned instance as if ",(0,i.kt)("inlineCode",{parentName:"p"},"MyContract::my_constructor")," returns a\n",(0,i.kt)("inlineCode",{parentName:"p"},"Self")," instance."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/flipper/lib.rs"},"flipper example"),"."),(0,i.kt)("h2",{id:"off-chain-testing"},"Off-chain Testing"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"TODO: mention that only supports ",(0,i.kt)("inlineCode",{parentName:"p"},"DefaultEnvironment"),"\nTODO: For integration tests, the test is annotated with our ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::test]")," attribute instead. This attribute denotes that the test is then executed in a simulated, mocked blockchain environment. There are functions available to influence how the test environment is configured (e.g. setting a specified balance of an account to simulate how a contract would behave when interacting with it).")),(0,i.kt)("p",null,"ink! smart contracts can compile in several different modes.\nThere are two main compilation models using either"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"on-chain mode: ",(0,i.kt)("inlineCode",{parentName:"li"},"no_std")," + WebAssembly as target"),(0,i.kt)("li",{parentName:"ul"},"off-chain mode: ",(0,i.kt)("inlineCode",{parentName:"li"},"std"))),(0,i.kt)("p",null,"We generally use the on-chain mode for actual smart contract deployment\nwhereas we use the off-chain mode for smart contract testing using the\noff-chain environment provided by the ",(0,i.kt)("inlineCode",{parentName:"p"},"ink_env")," crate."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"#[ink::test]")," proc. macro enables more elaborate off-chain testing."),(0,i.kt)("p",null,"If you annotate a test with this attribute it will be executed in a simulated\nenvironment, similar to as it would be run on-chain.\nYou then have fine-grained control over how a contract is called;\nfor example you can influence the block advancement, the value transferred to it,\nby which account it is called, which storage it is run with, etc.."),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/erc20/lib.rs"},(0,i.kt)("inlineCode",{parentName:"a"},"examples/erc20"))," contract on how to utilize those or ",(0,i.kt)("a",{parentName:"p",href:"https://docs.rs/ink_lang/4.0.0-beta/ink_lang/attr.test.html"},"the documentation")," for details."),(0,i.kt)("p",null,"At the moment there are some known limitations to our off-chain environment and we are working\non making it behave as close to the real chain environment as possible."),(0,i.kt)("p",null,"Defines a unit test that makes use of ink!'s off-chain testing capabilities."),(0,i.kt)("p",null,"If your unit test does not require the existence of an off-chain environment\nit is fine to not use this macro since it bears some overhead with the test."),(0,i.kt)("p",null,"Note that this macro is not required to run unit tests that require ink!'s\noff-chain testing capabilities but merely improves code readability."),(0,i.kt)("h3",{id:"how-do-you-find-out-if-your-test-requires-the-off-chain-environment"},"How do you find out if your test requires the off-chain environment?"),(0,i.kt)("p",null,"Normally if the test recursively uses or invokes some contract methods that\ncall a method defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"self.env()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"Self::env()"),"."),(0,i.kt)("p",null,"An examples is the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let caller: AccountId = self.env().caller();\n")),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    // Conventional unit test that works with assertions.\n    #[ink::test]\n    fn test1() {\n        // test code comes here as usual\n    }\n\n    // Conventional unit test that returns some Result.\n    // The test code can make use of operator-`?`.\n    #[ink::test]\n    fn test2() -> Result<(), ink::env::Error> {\n        // test code that returns a Rust Result type\n    }\n}\n")),(0,i.kt)("h2",{id:"end-to-end-e2e-testing"},"End-to-End (E2E) Testing"),(0,i.kt)("p",null,"E2E testing enables developers to write a test that will not only test the contract in an\nisolated manner; instead the contract will be tested ",(0,i.kt)("em",{parentName:"p"},"together")," with all components that\nwill be involved on-chain \u2013 so from end to end. This way of testing resembles closely\nhow the contract will actually behave in production."),(0,i.kt)("p",null,"As part of the test, the contract will be compiled and deployed to a Substrate node that\nis running in the background. ink! offers API functions that enable developers to then\ninteract with the contract via transactions that they create and submit to the blockchain."),(0,i.kt)("p",null,"You as a developer can define assertions on the outcome of their transactions, such as checking\nfor state mutations, transaction failures or incurred gas costs."),(0,i.kt)("p",null,"Your chain configuration will be tested together with the smart contract. And if your\nchain has pallets that are involved with the smart contract execution, those will be\npart of the test execution as well."),(0,i.kt)("p",null,"ink! does not put any requirements on the Substrate node in the background \u2013 for example,\nyou can run a node that contains a snapshot of a live network."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'#[ink_e2e::test]\nasync fn default_works(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {\n    // given\n    let constructor = FlipperRef::new_default();\n\n    // when\n    let contract_acc_id = client\n        .instantiate("flipper", &ink_e2e::bob(), constructor, 0, None)\n        .await\n        .expect("instantiate failed")\n        .account_id;\n\n    // then\n    let get = build_message::<FlipperRef>(contract_acc_id.clone())\n        .call(|flipper| flipper.get());\n    let get_res = client\n        .call(&ink_e2e::bob(), get, 0, None)\n        .await\n        .expect("get failed");\n    assert!(matches!(get_res.return_value(), false));\n\n    Ok(())\n}\n')))}p.isMDXComponent=!0}}]);