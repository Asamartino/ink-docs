"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[8387],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,m=p["".concat(l,".").concat(d)]||p[d]||h[d]||i;return n?a.createElement(m,o(o({ref:t},u),{},{components:n})):a.createElement(m,o({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={title:"Contract Testing",hide_title:!0,slug:"/basics/contract-testing"},o=void 0,s={unversionedId:"basics/testing",id:"basics/testing",title:"Contract Testing",description:"ink! supports three different stages of testing: unit, integration",source:"@site/docs/basics/testing.md",sourceDirName:"basics",slug:"/basics/contract-testing",permalink:"/basics/contract-testing",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/basics/testing.md",tags:[],version:"current",frontMatter:{title:"Contract Testing",hide_title:!0,slug:"/basics/contract-testing"},sidebar:"reference",previous:{title:"Metadata",permalink:"/metadata"},next:{title:"Contract Debugging",permalink:"/basics/contract-debugging"}},l={},c=[{value:"Unit Tests",id:"unit-tests",level:2},{value:"Off-chain Tests",id:"off-chain-tests",level:2},{value:"How do you find out if your test requires the off-chain environment?",id:"how-do-you-find-out-if-your-test-requires-the-off-chain-environment",level:3},{value:"Example",id:"example",level:3},{value:"End-to-End (E2E) Tests",id:"end-to-end-e2e-tests",level:2},{value:"Example",id:"example-1",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("img",{src:"/img/title/testing1.svg",className:"titlePic"}),(0,r.kt)("h1",{id:"contract-testing"},"Contract Testing"),(0,r.kt)("p",null,"ink! supports three different stages of testing: unit, integration\nand end-to-end tests. On this page we'll explain what the purpose\nof each stage is about and how to use it."),(0,r.kt)("img",{src:"/img/testing.png"}),(0,r.kt)("p",null,"Generally you can think of those three types of testing as a pyramid\nwith the top being the most elaborate test. The End-to-End (E2E)\ntests at the top will test the lower layers of the pyramid as part\nof them."),(0,r.kt)("h2",{id:"unit-tests"},"Unit Tests"),(0,r.kt)("p",null,"Testing contracts off-chain is done by ",(0,r.kt)("inlineCode",{parentName:"p"},"cargo test")," and users can simply use the standard Rust\nroutines of creating unit test modules within the ink! project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn my_test() { ... }\n}\n")),(0,r.kt)("p",null,"Test instances of contracts can be created with something like:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let contract = MyContract::my_constructor(a, b);\n")),(0,r.kt)("p",null,"Messages can simply be called on the returned instance as if ",(0,r.kt)("inlineCode",{parentName:"p"},"MyContract::my_constructor")," returns a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Self")," instance."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/flipper/lib.rs"},"flipper example"),"."),(0,r.kt)("h2",{id:"off-chain-tests"},"Off-chain Tests"),(0,r.kt)("p",null,"For integration tests, the test is annotated with our ",(0,r.kt)("inlineCode",{parentName:"p"},"#[ink::test]"),"\nattribute instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"#[test]"),". Our attribute denotes that\nthe test is then executed in a simulated, mocked blockchain environment.\nhere are functions available to influence how the test environment\nis configured (e.g. setting a specified balance of an account to\nsimulate how a contract would behave when interacting with it)."),(0,r.kt)("p",null,"If you annotate a test with the ",(0,r.kt)("inlineCode",{parentName:"p"},"#[ink::test]")," attribute it\nwill be executed in a simulated environment, similar to as it\nwould be run on-chain.\nYou then have fine-grained control over how a contract is called;\nfor example you can influence the block advancement, the value transferred to it,\nby which account it is called, which storage it is run with, etc.."),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/erc20/lib.rs"},(0,r.kt)("inlineCode",{parentName:"a"},"examples/erc20"))," contract on how to utilize those or ",(0,r.kt)("a",{parentName:"p",href:"https://docs.rs/ink_lang/4.0.0-rc/ink_lang/attr.test.html"},"the documentation")," for details."),(0,r.kt)("p",null,"At the moment there are some known limitations to our off-chain environment,\nand we are working on making it behave as close to the real chain environment\nas possible."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"One limitation of the off-chain testing framework is that it\ncurrently only supports a ",(0,r.kt)("inlineCode",{parentName:"p"},"DefaultEnvironment"),"."),(0,r.kt)("p",{parentName:"admonition"},"See ",(0,r.kt)("a",{parentName:"p",href:"/basics/chain-environment-types"},"here")," for an explanation of what an environment is.")),(0,r.kt)("h3",{id:"how-do-you-find-out-if-your-test-requires-the-off-chain-environment"},"How do you find out if your test requires the off-chain environment?"),(0,r.kt)("p",null,"Normally if the test recursively uses or invokes some contract methods that\ncall a method defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"self.env()")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"Self::env()"),"."),(0,r.kt)("p",null,"An example is the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let caller: AccountId = self.env().caller();\n")),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    // Conventional unit test that works with assertions.\n    #[ink::test]\n    fn test1() {\n        // test code comes here as usual\n    }\n\n    // Conventional unit test that returns some Result.\n    // The test code can make use of operator-`?`.\n    #[ink::test]\n    fn test2() -> Result<(), ink::env::Error> {\n        // test code that returns a Rust Result type\n    }\n}\n")),(0,r.kt)("h2",{id:"end-to-end-e2e-tests"},"End-to-End (E2E) Tests"),(0,r.kt)("p",null,"E2E testing enables developers to write a test that will not only test the contract in an\nisolated manner; instead the contract will be tested ",(0,r.kt)("em",{parentName:"p"},"together")," with all components that\nwill be involved on-chain \u2013 so from end to end. This way of testing resembles closely\nhow the contract will actually behave in production."),(0,r.kt)("p",null,"As part of the test, the contract will be compiled and deployed to a Substrate node that\nis running in the background. ink! offers API functions that enable developers to then\ninteract with the contract via transactions that they create and submit to the blockchain."),(0,r.kt)("p",null,"You as a developer can define assertions on the outcome of their transactions, such as checking\nfor state mutations, transaction failures or incurred gas costs."),(0,r.kt)("p",null,"Your chain configuration will be tested together with the smart contract. And if your\nchain has pallets that are involved with the smart contract execution, those will be\npart of the test execution as well."),(0,r.kt)("p",null,"ink! does not put any requirements on the Substrate node in the background \u2013 for example,\nyou can run a node that contains a snapshot of a live network."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("p",null,"The following code example illustrates a basic E2E test for the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/flipper/lib.rs"},"flipper example"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[ink_e2e::test]\nasync fn default_works(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {\n    // When the function is entered, the contract was already\n    // built in the background via `cargo contract build`.\n    // The `client` object exposes an interface to interact\n    // with the Substrate node.\n    \n    // given\n    let constructor = FlipperRef::new_default();\n\n    // when\n    let contract_acc_id = client\n        .instantiate("flipper", &ink_e2e::bob(), constructor, 0, None)\n        .await\n        .expect("instantiate failed")\n        .account_id;\n\n    // then\n    let get = build_message::<FlipperRef>(contract_acc_id.clone())\n        .call(|flipper| flipper.get());\n    let get_res = client\n        .call(&ink_e2e::bob(), get, 0, None)\n        .await\n        .expect("get failed");\n    assert!(matches!(get_res.return_value(), false));\n\n    Ok(())\n}\n')),(0,r.kt)("p",null,"You can run the above test by going to the ",(0,r.kt)("inlineCode",{parentName:"p"},"flipper")," folder in\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/tree/master/examples"},"the ink! examples directory"),"."),(0,r.kt)("p",null,"Before you can run the test, you have to start a Substrate\nnode with ",(0,r.kt)("inlineCode",{parentName:"p"},"pallet-contracts")," in the background.\nYou can use e.g. our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate-contracts-node"},(0,r.kt)("inlineCode",{parentName:"a"},"substrate-contracts-node")),"\nfor this. Start the node in one shell session/terminal window via"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"substrate-contracts-node\n")),(0,r.kt)("p",null,"Then, while keeping the node running, execute the following command\nin another shell session/terminal window."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cargo test --features e2e-tests\n")))}p.isMDXComponent=!0}}]);