"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[4091],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),p=l(n),f=r,d=p["".concat(s,".").concat(f)]||p[f]||m[f]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=p;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:r,o[1]=u;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1494:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return u},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],u={title:"Mutating Storage Values",slug:"/basics/mutating-values"},s=void 0,l={unversionedId:"basics/mutating-values",id:"basics/mutating-values",title:"Mutating Storage Values",description:"It's time to modify some storage!",source:"@site/docs/basics/mutating-values.md",sourceDirName:"basics",slug:"/basics/mutating-values",permalink:"/ink-docs/basics/mutating-values",editUrl:"https://github.com/ink-docs/edit/master/docs/basics/mutating-values.md",tags:[],version:"current",frontMatter:{title:"Mutating Storage Values",slug:"/basics/mutating-values"},sidebar:"reference",previous:{title:"Reading Values from Storage",permalink:"/ink-docs/basics/reading-values"},next:{title:"Events",permalink:"/ink-docs/basics/events"}},c=[{value:"Mutable and Immutable Functions",id:"mutable-and-immutable-functions",children:[],level:2},{value:"Lazy Storage Values",id:"lazy-storage-values",children:[],level:2}],m={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It's time to modify some storage!"),(0,i.kt)("h2",{id:"mutable-and-immutable-functions"},"Mutable and Immutable Functions"),(0,i.kt)("p",null,"You may have noticed that the function template included ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," as the first parameter of the\ncontract functions. It is through ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," that you gain access to all your contract functions and\nstorage items."),(0,i.kt)("p",null,"If you are simply ",(0,i.kt)("em",{parentName:"p"},"reading")," from the contract storage, you only need to pass ",(0,i.kt)("inlineCode",{parentName:"p"},"&self"),". But if you want to ",(0,i.kt)("em",{parentName:"p"},"modify")," storage items, you will need to explicitly mark it as mutable, ",(0,i.kt)("inlineCode",{parentName:"p"},"&mut self"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl MyContract {\n    #[ink(message)]\n    pub fn my_getter(&self) -> u32 {\n        self.my_number\n    }\n\n    #[ink(message)]\n    pub fn my_setter(&mut self, new_value: u32) {\n        self.my_number = new_value;\n    }\n}\n")),(0,i.kt)("h2",{id:"lazy-storage-values"},"Lazy Storage Values"),(0,i.kt)("p",null,"There is ",(0,i.kt)("a",{parentName:"p",href:"https://paritytech.github.io/ink/ink_storage/struct.Lazy.html"},"a ",(0,i.kt)("inlineCode",{parentName:"a"},"Lazy")," type")," that can be\nused for ink! storage values that do not need to be loaded in some or most cases. Many simple ink!\nexamples do not require the use of ",(0,i.kt)("inlineCode",{parentName:"p"},"Lazy")," values. Since there is\nsome overhead associated with ",(0,i.kt)("inlineCode",{parentName:"p"},"Lazy")," values, they should only be used where required."),(0,i.kt)("p",null,"This is an example of using the ",(0,i.kt)("inlineCode",{parentName:"p"},"Lazy")," type:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[ink(storage)]\npub struct MyContract {\n    // Store some number\n    my_number: ink_storage::Lazy<u32>,\n}\n\nimpl MyContract {\n    #[ink(constructor)]\n    pub fn new(init_value: i32) -> Self {\n        Self {\n            my_number: ink_storage::Lazy::<u32>::new(init_value),\n        }\n    }\n\n    #[ink(message)]\n    pub fn my_setter(&mut self, new_value: u32) {\n        ink_storage::Lazy::<u32>::set(&mut self.my_number, new_value);\n    }\n\n    #[ink(message)]\n    pub fn my_adder(&mut self, add_value: u32) {\n        let my_number = &mut self.my_number;\n        let cur = ink_storage::Lazy::<u32>::get(my_number);\n        ink_storage::Lazy::<u32>::set(my_number, cur + add_value);\n    }\n}\n")))}p.isMDXComponent=!0}}]);