"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[53],{1109:function(t){t.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"reference":[{"type":"category","collapsed":true,"collapsible":true,"label":"Overview","items":[{"type":"link","label":"Overview","href":"/ink-docs/","docId":"intro/intro"},{"type":"link","label":"Why Rust for Smart Contracts?","href":"/ink-docs/why-rust-for-smart-contracts","docId":"intro/why-rust"},{"type":"link","label":"Why WebAssembly for Smart Contracts?","href":"/ink-docs/why-webassembly-for-smart-contracts","docId":"intro/why-webassembly"},{"type":"link","label":"How it Works \u2012 Substrate","href":"/ink-docs/how-it-works","docId":"intro/how-it-works"},{"type":"link","label":"ink! vs. Solidity","href":"/ink-docs/ink-vs-solidity","docId":"intro/ink-vs-solidity"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Getting started","items":[{"type":"link","label":"Setup","href":"/ink-docs/getting-started/setup","docId":"getting-started/setup"},{"type":"link","label":"Creating an ink! Project","href":"/ink-docs/getting-started/creating-an-ink-project","docId":"getting-started/creating"},{"type":"link","label":"Compile Your Contract","href":"/ink-docs/getting-started/building-your-contract","docId":"getting-started/compiling"},{"type":"link","label":"Run a Substrate Node","href":"/ink-docs/getting-started/running-substrate","docId":"getting-started/running"},{"type":"link","label":"Deploy Your Contract","href":"/ink-docs/getting-started/deploy-your-contract","docId":"getting-started/deploying"},{"type":"link","label":"Call Your Contract","href":"/ink-docs/getting-started/calling-your-contract","docId":"getting-started/calling"},{"type":"link","label":"Troubleshooting","href":"/ink-docs/getting-started/troubleshooting","docId":"getting-started/troubleshooting"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Basics","items":[{"type":"link","label":"Contract Template","href":"/ink-docs/basics/contract-template","docId":"basics/contract-template"},{"type":"link","label":"Storing Values","href":"/ink-docs/basics/storing-values","docId":"basics/storing-values"},{"type":"link","label":"Reading Values from Storage","href":"/ink-docs/basics/reading-values","docId":"basics/reading-values"},{"type":"link","label":"Mutating Storage Values","href":"/ink-docs/basics/mutating-values","docId":"basics/mutating-values"},{"type":"link","label":"Events","href":"/ink-docs/basics/events","docId":"basics/events"},{"type":"link","label":"Trait Definitions","href":"/ink-docs/basics/trait-definitions","docId":"basics/trait-definitions"},{"type":"link","label":"Cross-Contract Calling","href":"/ink-docs/basics/cross-contract-calling","docId":"basics/cross-contract-calling"},{"type":"link","label":"Contract Testing","href":"/ink-docs/basics/contract-testing","docId":"basics/testing"},{"type":"link","label":"Environment Functions","href":"/ink-docs/basics/environment-functions","docId":"basics/env-functions"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Macros & Attributes","items":[{"type":"link","label":"Overview","href":"/ink-docs/macros-attributes","docId":"macros-attributes/overview"},{"type":"link","label":"#[ink::contract]","href":"/ink-docs/macros-attributes/contract","docId":"macros-attributes/contract"},{"type":"link","label":"#[ink(anonymous)]","href":"/ink-docs/macros-attributes/anonymous","docId":"macros-attributes/anonymous"},{"type":"link","label":"#[ink(constructor)]","href":"/ink-docs/macros-attributes/constructor","docId":"macros-attributes/constructor"},{"type":"link","label":"#[ink(event)]","href":"/ink-docs/macros-attributes/event","docId":"macros-attributes/event"},{"type":"link","label":"#[ink(impl)]","href":"/ink-docs/macros-attributes/impl","docId":"macros-attributes/implementation"},{"type":"link","label":"#[ink(message)]","href":"/ink-docs/macros-attributes/message","docId":"macros-attributes/message"},{"type":"link","label":"#[ink(namespace = \\"\u2026\\")]","href":"/ink-docs/macros-attributes/namespace","docId":"macros-attributes/namespace"},{"type":"link","label":"#[ink(payable)]","href":"/ink-docs/macros-attributes/payable","docId":"macros-attributes/payable"},{"type":"link","label":"#[ink(selector = S:u32)]","href":"/ink-docs/macros-attributes/selector","docId":"macros-attributes/selector"},{"type":"link","label":"#[ink(storage)]","href":"/ink-docs/macros-attributes/storage","docId":"macros-attributes/storage"},{"type":"link","label":"#[ink(topic)]","href":"/ink-docs/macros-attributes/topic","docId":"macros-attributes/topic"},{"type":"link","label":"#[ink::chain_extension]","href":"/ink-docs/macros-attributes/chain-extension","docId":"macros-attributes/chain-extension"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Storage & Data Structures","items":[{"type":"link","label":"Overview","href":"/ink-docs/datastructures/overview","docId":"datastructures/overview"},{"type":"link","label":"Working with Mapping","href":"/ink-docs/datastructures/mapping","docId":"datastructures/mapping"},{"type":"link","label":"Spread Storage Layout","href":"/ink-docs/datastructures/spread-storage-layout","docId":"datastructures/spread-storage-layout"},{"type":"link","label":"Opt out of Storage","href":"/ink-docs/datastructures/opting-out","docId":"datastructures/opting-out"},{"type":"link","label":"Dynamic Storage Allocator","href":"/ink-docs/datastructures/dynamic-allocation","docId":"datastructures/dynamic-allocation"},{"type":"link","label":"Custom Data Structures","href":"/ink-docs/datastructures/custom-datastructure","docId":"datastructures/custom"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Examples","items":[{"type":"link","label":"Overview","href":"/ink-docs/examples","docId":"examples/overview"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"cargo-contract CLI","items":[{"type":"link","label":"Overview","href":"/ink-docs/cargo-contract-cli","docId":"cargo-contract/overview"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"Canvas Test Network","items":[{"type":"link","label":"Overview","href":"/ink-docs/canvas","docId":"canvas/overview"}]},{"type":"category","collapsed":true,"collapsible":true,"label":"FAQ","items":[{"type":"link","label":"Frequently Asked Questions","href":"/ink-docs/faq","docId":"faq/faq"}]}]},"docs":{"basics/cargo-toml":{"id":"basics/cargo-toml","title":"Cargo.toml","description":"TODO go through a typical Cargo.toml and explain what the dependencies mean"},"basics/contract-template":{"id":"basics/contract-template","title":"Contract Template","description":"Change into your working directory and run:","sidebar":"reference"},"basics/cross-contract-calling":{"id":"basics/cross-contract-calling","title":"Cross-Contract Calling","description":"In ink! contracts it is possible to call ink! messages and ink! constructors. So ink! constructors allow","sidebar":"reference"},"basics/env-functions":{"id":"basics/env-functions","title":"Environment Functions","description":"ink! exposes a number of handy environment functions.","sidebar":"reference"},"basics/events":{"id":"basics/events","title":"Events","description":"An ink! smart contract may define events that it can emit during contract execution.","sidebar":"reference"},"basics/mutating-values":{"id":"basics/mutating-values","title":"Mutating Storage Values","description":"It\'s time to modify some storage!","sidebar":"reference"},"basics/reading-values":{"id":"basics/reading-values","title":"Reading Values from Storage","description":"Reading from storage is where the fun begins!","sidebar":"reference"},"basics/storing-values":{"id":"basics/storing-values","title":"Storing Values","description":"Here is how you store simple values in storage:","sidebar":"reference"},"basics/testing":{"id":"basics/testing","title":"Contract Testing","description":"Unit Tests","sidebar":"reference"},"basics/trait-definitions":{"id":"basics/trait-definitions","title":"Trait Definitions","description":"Through the #[ink::trait_definition] proc. macro it is now possible to define your very own trait definitions that are then implementable by ink! smart contracts.","sidebar":"reference"},"canvas/overview":{"id":"canvas/overview","title":"Overview","description":"What is the Canvas Test Network?","sidebar":"reference"},"cargo-contract/call":{"id":"cargo-contract/call","title":"Call a Contract","description":"TODO"},"cargo-contract/deploy":{"id":"cargo-contract/deploy","title":"Deploy a Contract","description":"TODO"},"cargo-contract/instantiate":{"id":"cargo-contract/instantiate","title":"Instantiate a Contract","description":"TODO"},"cargo-contract/overview":{"id":"cargo-contract/overview","title":"Overview","description":"version","sidebar":"reference"},"datastructures/custom":{"id":"datastructures/custom","title":"Custom Data Structures","description":"While the inkstorage crate provides tons of useful utilities and data structures to organize and manipulate the contract\'s storage contract authors are not limited by its capabilities. By implementing the core SpreadLayout/PackedLayout traits (and the StorageLayout trait for supporting the metadata generated for the .contract bundle) users are able to define their very own custom storage data structures with their own set of requirement and features that work along the inkstorage data structures as long as they fulfill the mere requirements stated by those two traits.","sidebar":"reference"},"datastructures/dynamic-allocation":{"id":"datastructures/dynamic-allocation","title":"Dynamic Storage Allocator","description":"In the previous section we have seen how the default mode of operation is to spread information","sidebar":"reference"},"datastructures/mapping":{"id":"datastructures/mapping","title":"Working with Mapping","description":"In this section we want to demonstrate how to work with ink! Mapping.","sidebar":"reference"},"datastructures/opting-out":{"id":"datastructures/opting-out","title":"Opt out of Storage","description":"If you are in need of storing some temporary information across method and message","sidebar":"reference"},"datastructures/overview":{"id":"datastructures/overview","title":"Overview","description":"The ink_storage crate acts as the standard storage library for ink! smart contracts. At","sidebar":"reference"},"datastructures/spread-storage-layout":{"id":"datastructures/spread-storage-layout","title":"Spread Storage Layout","description":"Storage Organization","sidebar":"reference"},"examples/overview":{"id":"examples/overview","title":"Overview","description":"In our examples folder you find a number of examples written in ink!.","sidebar":"reference"},"faq/faq":{"id":"faq/faq","title":"Frequently Asked Questions","description":"Is it \\"ink\\" or \\"ink!\\"? What does the \\"!\\" stand for?","sidebar":"reference"},"getting-started/calling":{"id":"getting-started/calling","title":"Call Your Contract","description":"Now that your contract has been fully deployed, we can start interacting with it! Flipper only has","sidebar":"reference"},"getting-started/compiling":{"id":"getting-started/compiling","title":"Compile Your Contract","description":"Run the following command in your flipper directory to compile your smart contract:","sidebar":"reference"},"getting-started/creating":{"id":"getting-started/creating","title":"Creating an ink! Project","description":"ink! is an Embedded Domain Specific Language (EDSL) that you can use to write WebAssembly based smart contracts in the Rust programming language.","sidebar":"reference"},"getting-started/deploying":{"id":"getting-started/deploying","title":"Deploy Your Contract","description":"Now that we have generated the Wasm binary from our source code and started a Substrate Smart Contracts node, we want to deploy this contract onto our blockchain.","sidebar":"reference"},"getting-started/running":{"id":"getting-started/running","title":"Run a Substrate Node","description":"The substrate-contracts-node is a simple Substrate","sidebar":"reference"},"getting-started/setup":{"id":"getting-started/setup","title":"Setup","description":"In case you are looking for a guided tutorial directed","sidebar":"reference"},"getting-started/troubleshooting":{"id":"getting-started/troubleshooting","title":"Troubleshooting","description":"Here are solutions to some of the common problems you may come across:","sidebar":"reference"},"intro/how-it-works":{"id":"intro/how-it-works","title":"How it Works \u2012 Substrate","description":"Substrate\'s Framework for Runtime Aggregation of Modularised Entities (FRAME) contains","sidebar":"reference"},"intro/ink-vs-solidity":{"id":"intro/ink-vs-solidity","title":"ink! vs. Solidity","description":"Here is a brief comparison of features between ink! and Solidity:","sidebar":"reference"},"intro/intro":{"id":"intro/intro","title":"Overview","description":"With ink! you can write smart contracts in Rust for blockchains built on","sidebar":"reference"},"intro/why-rust":{"id":"intro/why-rust","title":"Why Rust for Smart Contracts?","description":"ink! chooses not to invent a new programming language, but rather adapt a subset of Rust to serve our purpose.","sidebar":"reference"},"intro/why-webassembly":{"id":"intro/why-webassembly","title":"Why WebAssembly for Smart Contracts?","description":"* High performance: Wasm is high performance \u2014 it\u2019s built to be as close to native machine code as possible while still being platform independent.","sidebar":"reference"},"macros-attributes/anonymous":{"id":"macros-attributes/anonymous","title":"#[ink(anonymous)]","description":"Applicable to ink! events.","sidebar":"reference"},"macros-attributes/chain-extension":{"id":"macros-attributes/chain-extension","title":"#[ink::chain_extension]","description":"In the default configuration of the contracts-pallet a smart contract can only interact with the runtime","sidebar":"reference"},"macros-attributes/constructor":{"id":"macros-attributes/constructor","title":"#[ink(constructor)]","description":"Applicable to a method.","sidebar":"reference"},"macros-attributes/contract":{"id":"macros-attributes/contract","title":"#[ink::contract]","description":"This macro is the entry point for writing ink! smart contracts.","sidebar":"reference"},"macros-attributes/event":{"id":"macros-attributes/event","title":"#[ink(event)]","description":"Applicable on struct definitions.","sidebar":"reference"},"macros-attributes/implementation":{"id":"macros-attributes/implementation","title":"#[ink(impl)]","description":"This attribute supports a niche case that is rarely needed.","sidebar":"reference"},"macros-attributes/message":{"id":"macros-attributes/message","title":"#[ink(message)]","description":"Applicable to methods.","sidebar":"reference"},"macros-attributes/namespace":{"id":"macros-attributes/namespace","title":"#[ink(namespace = \\"\u2026\\")]","description":"Applicable to ink! trait implementation blocks.","sidebar":"reference"},"macros-attributes/overview":{"id":"macros-attributes/overview","title":"Overview","description":"An ink! module is the module that is flagged by #[ink::contract] containing all the ink! definitions.","sidebar":"reference"},"macros-attributes/payable":{"id":"macros-attributes/payable","title":"#[ink(payable)]","description":"Applicable to ink! messages.","sidebar":"reference"},"macros-attributes/selector":{"id":"macros-attributes/selector","title":"#[ink(selector = S:u32)]","description":"Applicable to ink! messages and ink! constructors.","sidebar":"reference"},"macros-attributes/storage":{"id":"macros-attributes/storage","title":"#[ink(storage)]","description":"Applicable on struct definitions.","sidebar":"reference"},"macros-attributes/topic":{"id":"macros-attributes/topic","title":"#[ink(topic)]","description":"Applied on fields of ink! event types to indicate that they are topics.","sidebar":"reference"}}}')}}]);