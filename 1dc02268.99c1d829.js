(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{105:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),u=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=u(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},f=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=u(n),f=r,h=b["".concat(c,".").concat(f)]||b[f]||p[f]||i;return n?a.a.createElement(h,o(o({ref:t},l),{},{components:n})):a.a.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,c=new Array(i);c[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var l=2;l<i;l++)c[l]=n[l];return a.a.createElement.apply(null,c)}return a.a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},63:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return u}));var r=n(2),a=n(6),i=(n(0),n(105)),c={title:"Contract Testing",slug:"/basics/off-chain-testing"},o={unversionedId:"basics/off-chain-testing",id:"basics/off-chain-testing",isDocsHomePage:!1,title:"Contract Testing",description:"Unit Tests",source:"@site/docs/basics/off-chain-testing.md",slug:"/basics/off-chain-testing",permalink:"/ink-docs/basics/off-chain-testing",editUrl:"https://github.com/ink-docs/edit/master/docs/basics/off-chain-testing.md",version:"current",sidebar:"reference",previous:{title:"Cross-Contract Calling",permalink:"/ink-docs/basics/cross-contract-calling"},next:{title:"Environment Functions",permalink:"/ink-docs/basics/environment-functions"}},s=[{value:"Unit Tests",id:"unit-tests",children:[]},{value:"Off-chain Testing",id:"off-chain-testing",children:[]},{value:"On-chain Testing",id:"on-chain-testing",children:[]}],l={rightToc:s};function u(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"unit-tests"},"Unit Tests"),Object(i.b)("p",null,"Testing contracts off-chain is done by ",Object(i.b)("inlineCode",{parentName:"p"},"cargo test")," and users can simply use the standard routines\nof creating unit test modules within the ink! project:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn my_test() { ... }\n}\n")),Object(i.b)("p",null,"Test instances of contracts can be created with something like:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"let contract = MyContract::my_constructor(a, b);\n")),Object(i.b)("p",null,"Messages can simply be called on the returned instance as if ",Object(i.b)("inlineCode",{parentName:"p"},"MyContract::my_constructor")," returns a\n",Object(i.b)("inlineCode",{parentName:"p"},"Self")," instance."),Object(i.b)("p",null,"See the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/paritytech/ink/blob/master/examples/flipper/src/lib.rs"}),"flipper example"),"."),Object(i.b)("h2",{id:"off-chain-testing"},"Off-chain Testing"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"#[ink::test]")," proc. macro enables more elaborate off-chain testing."),Object(i.b)("p",null,"If you annotate a test with this attribute it will be executed in a simulated\nenvironment, similar to as it would be run on-chain.\nYou then have fine-grained control over how a contract is called;\nfor example you can influence the block advancement, the value transferred to it,\nby which account it is called, which storage it is run with, etc.."),Object(i.b)("p",null,"See the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/paritytech/ink/blob/master/examples/erc20/lib.rs#L278-L280"}),Object(i.b)("inlineCode",{parentName:"a"},"examples/erc20"))," contract on how to utilize those or ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://paritytech.github.io/ink/ink_lang/attr.test.html"}),"the documentation")," for details."),Object(i.b)("p",null,"At the moment there are some known limitations to our off-chain environment and we are working\non making it behave as close to the real chain environment as possible."),Object(i.b)("h2",{id:"on-chain-testing"},"On-chain Testing"),Object(i.b)("p",null,"The easiest way to do on-chain testing is to\n",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/getting-started/running-substrate"}),"run a local substrate node"),",\ndeploy your contract there and interact with it."))}u.isMDXComponent=!0}}]);