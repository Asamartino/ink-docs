(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{105:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return f}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),u=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=u(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},m=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,f=p["".concat(o,".").concat(m)]||p[m]||b[m]||i;return t?a.a.createElement(f,s(s({ref:n},l),{},{components:t})):a.a.createElement(f,s({ref:n},l))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},81:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(2),a=t(6),i=(t(0),t(105)),o={title:"Events",slug:"/basics/events"},s={unversionedId:"basics/events",id:"basics/events",isDocsHomePage:!1,title:"Events",description:"An event is a mean of recording, for the benefit of the off-chain world, that some particular state transition happened.",source:"@site/docs/basics/events.md",slug:"/basics/events",permalink:"/ink-docs/basics/events",editUrl:"https://github.com/ink-docs/edit/master/docs/basics/events.md",version:"current",sidebar:"reference",previous:{title:"Mutating Storage Values",permalink:"/ink-docs/basics/mutating-values"},next:{title:"Trait Definitions",permalink:"/ink-docs/basics/trait-definitions"}},c=[{value:"Event Definition",id:"event-definition",children:[]},{value:"Emitting Events in a Constructor",id:"emitting-events-in-a-constructor",children:[]},{value:"Emitting Events from Messages",id:"emitting-events-from-messages",children:[]},{value:"Anonymous Events",id:"anonymous-events",children:[]}],l={rightToc:c};function u(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"An event is a mean of recording, for the benefit of the off-chain world, that some particular state transition happened. "),Object(i.b)("p",null,"See our ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/paritytech/ink/blob/master/examples/erc20/lib.rs"}),Object(i.b)("inlineCode",{parentName:"a"},"ERC20 example contract")),"\nfor an elaborate example which uses events."),Object(i.b)("h2",{id:"event-definition"},"Event Definition"),Object(i.b)("p",null,"This is how an event defintion looks:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[ink(event)]\npub struct Transferred {\n    #[ink(topic)]\n    from: Option<AccountId>,\n\n    #[ink(topic)]\n    to: Option<AccountId>,\n\n    amount: Balance\n\n}\n")),Object(i.b)("p",null,"Add the ",Object(i.b)("inlineCode",{parentName:"p"},"#[ink(topic)]")," attribute tag to each item in your event that you want to have indexed.\nA good rule of thumb is to ask yourself if somebody might want to search for this topic.\nFor this reason the ",Object(i.b)("inlineCode",{parentName:"p"},"amount")," in the exemplary event above was not\nmade indexable \u2012 there will most probably be a lot of different events with\ndiffering amounts each."),Object(i.b)("h2",{id:"emitting-events-in-a-constructor"},"Emitting Events in a Constructor"),Object(i.b)("p",null,"In a constructor events are emitted via ",Object(i.b)("inlineCode",{parentName:"p"},"Self::env().emit_event()"),".\nSee this example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[ink(constructor)]\npub fn new(initial_value: Balance) -> Self {\n    let caller = Self::env().caller();\n    let mut balances = HashMap::new();\n    balances.insert(caller, initial_supply);\n\n    Self::env().emit_event(Transferred {\n        from: None,\n        to: Some(caller),\n        amount: initial_supply\n    });\n\n    Self { total_supply: initial_supply, balances }\n}\n")),Object(i.b)("h2",{id:"emitting-events-from-messages"},"Emitting Events from Messages"),Object(i.b)("p",null,"In a message events are emitted via ",Object(i.b)("inlineCode",{parentName:"p"},"self.env().emit_event()"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-rust"}),"#[ink(message)]\npub fn transfer(&mut self, to: AccountId, amount: Balance) -> Result {\n    let from = self.env().caller();\n    // implementation hidden\n    self.env().emit_event(Transferred {\n        from: Some(from),\n        to: Some(to),\n        amount\n    });\n    Ok(())\n}\n")),Object(i.b)("h2",{id:"anonymous-events"},"Anonymous Events"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"#[ink(anonymous)]")),Object(i.b)("p",null,"Applicable to ink! events."),Object(i.b)("p",null,"Tells the ink! codegen to treat the ink! event as anonymous which omits the event signature as topic upon emitting. Very similar to anonymous events in Solidity."))}u.isMDXComponent=!0}}]);