"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[773],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1752:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={title:"Testing del Contrato",slug:"/basics/contract-testing"},i=void 0,s={unversionedId:"basics/testing",id:"version-4.0.0-alpha.1/basics/testing",title:"Testing del Contrato",description:"TODO: ink! supports different stages of testing for different purposes.",source:"@site/i18n/es/docusaurus-plugin-content-docs/version-4.0.0-alpha.1/basics/testing.md",sourceDirName:"basics",slug:"/basics/contract-testing",permalink:"/es/4.0.0-alpha.1/basics/contract-testing",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/versioned_docs/version-4.0.0-alpha.1/basics/testing.md",tags:[],version:"4.0.0-alpha.1",frontMatter:{title:"Testing del Contrato",slug:"/basics/contract-testing"},sidebar:"reference",previous:{title:"Metadata",permalink:"/es/4.0.0-alpha.1/metadata"},next:{title:"Contract Debugging",permalink:"/es/4.0.0-alpha.1/basics/contract-debugging"}},l={},c=[{value:"Unit Tests",id:"unit-tests",level:2},{value:"Off-chain Testing",id:"off-chain-testing",level:2},{value:"\xbfC\xf3mo saber si su test requiere el entorno off-chain?",id:"c\xf3mo-saber-si-su-test-requiere-el-entorno-off-chain",level:3},{value:"Ejemplo",id:"ejemplo",level:3}],u={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("img",{src:"/img/testing.png",alt:"Smart contracts parachain on Rococo"}),(0,o.kt)("p",null,"TODO: ink! supports different stages of testing for different purposes.\nTODO: We'll explain on this page what each stage is about and how to use it."),(0,o.kt)("h2",{id:"unit-tests"},"Unit Tests"),(0,o.kt)("p",null,"El testing de los contractos off-chain se hace mediante ",(0,o.kt)("inlineCode",{parentName:"p"},"cargo test")," y los usuarios pueden simplemente utilizar las rutinas est\xe1ndar para\ncrear m\xf3dulos de unit test dentro del projecto de ink!:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn my_test() { ... }\n}\n")),(0,o.kt)("p",null,"Se pueden crear instancias de test de los contratos as\xed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let contract = MyContract::my_constructor(a, b);\n")),(0,o.kt)("p",null,"Los mensajes se pueden llamar simplemente en la instancia devuelta como si ",(0,o.kt)("inlineCode",{parentName:"p"},"MyContract::my_constructor")," devolviese\nuna instancia ",(0,o.kt)("inlineCode",{parentName:"p"},"Self"),"."),(0,o.kt)("p",null,"Vea el ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/flipper/lib.rs"},"ejemplo flipper"),"."),(0,o.kt)("h2",{id:"off-chain-testing"},"Off-chain Testing"),(0,o.kt)("p",null,"Los ink! smart contracts se pueden compilar de diversas maneras.\nExisten 2 principales modelos de compilaci\xf3n utilizando"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"modo on-chain: ",(0,o.kt)("inlineCode",{parentName:"li"},"no_std")," + WebAssembly as target"),(0,o.kt)("li",{parentName:"ul"},"modo off-chain: ",(0,o.kt)("inlineCode",{parentName:"li"},"std"))),(0,o.kt)("p",null,"Generalmente utilizamos el modo on-chain para el despliegue del smart contract mientras que\nutilizamos el modo off-chain para el testing de smart contracts utilizando el entorno off-chain\nproporcionado por el crate ",(0,o.kt)("inlineCode",{parentName:"p"},"ink_env"),"."),(0,o.kt)("p",null,"La proc. macro ",(0,o.kt)("inlineCode",{parentName:"p"},"#[ink::test]")," permite off-chain testing m\xe1s elaborado."),(0,o.kt)("p",null,"Si anotas un test con este atributo se ejecutara en un entorno simulado,\nsimilar a como se ejecutar\xeda on-chain.\nEntonces tienes un control detallado sobre c\xf3mo llamar al contrato;\npor ejemplo puedes influir en el avance del bloque, el valor transferido al mismo,\npor qu\xe9 cuenta se llama, con qu\xe9 almacenamiento se ejecuta, etc."),(0,o.kt)("p",null,"Vea el contrato ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/paritytech/ink/blob/master/examples/erc20/lib.rs"},(0,o.kt)("inlineCode",{parentName:"a"},"examples/erc20"))," csobre como utilizarlo o ",(0,o.kt)("a",{parentName:"p",href:"https://docs.rs/ink_lang/4.0.0-beta/ink_lang/attr.test.html"},"la documentaci\xf3n")," para m\xe1s detalles."),(0,o.kt)("p",null,"En este momento hay algunas limitaciones conocidas para nuestro entorno off-chain y estamos trabajando\nen hacer que el comportamiento sea lo m\xe1s cercano posible a un entorno de una red real."),(0,o.kt)("p",null,"Define un unit test que utilice las capacidades del ink! testing off-chain."),(0,o.kt)("p",null,"Si tu unit test no requiere de la existencia de un entorno off-chain esta bien no\nutilizar esta macro ya que tiene algunos gastos generales con el test."),(0,o.kt)("p",null,"Date cuenta que esta macro no es necesaria para ejecutar los unit tests que requieren\nlas capacidades del ink! testing off-chain pero simplemente mejora la legibilidad del c\xf3digo."),(0,o.kt)("h3",{id:"c\xf3mo-saber-si-su-test-requiere-el-entorno-off-chain"},"\xbfC\xf3mo saber si su test requiere el entorno off-chain?"),(0,o.kt)("p",null,"Normalmente si el test utiliza recursivamente o invoca algunos metodos del contrato que\nllaman a un metodo definido en ",(0,o.kt)("inlineCode",{parentName:"p"},"self.env()")," o ",(0,o.kt)("inlineCode",{parentName:"p"},"Self::env()"),"."),(0,o.kt)("p",null,"Un ejemplo es el siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"let caller: AccountId = self.env().caller();\n")),(0,o.kt)("h3",{id:"ejemplo"},"Ejemplo"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},"#[cfg(test)]\nmod tests {\n    // Conventional unit test that works with assertions.\n    #[ink::test]\n    fn test1() {\n        // test code comes here as usual\n    }\n\n    // Unit test convencional que devuelve alg\xfan Result.\n    // El c\xf3digo del test puede utilizar el operador-`?`.\n    #[ink::test]\n    fn test2() -> Result<(), ink::env::Error> {\n        // El c\xf3digo del test que devuelve un tipo Rust Result\n    }\n}\n")),(0,o.kt)("div",{class:"translateTodo"},"## End-to-End (E2E) Testing",(0,o.kt)("p",null,"E2E testing enables developers to write a test that will not only test the contract in an\nisolated manner; instead the contract will be tested ",(0,o.kt)("em",{parentName:"p"},"together")," with all components that\nwill be involved on-chain \u2013 so from end to end. This way of testing resembles closely\nhow the contract will actually behave in production."),(0,o.kt)("p",null,"As part of the test, the contract will be compiled and deployed to a Substrate node that\nis running in the background. ink! offers API functions that enable developers to then\ninteract with the contract via transactions that they create and submit to the blockchain."),(0,o.kt)("p",null,"You as a developer can define assertions on the outcome of their transactions, such as checking\nfor state mutations, transaction failures or incurred gas costs."),(0,o.kt)("p",null,"Your chain configuration will be tested together with the smart contract. And if your\nchain has pallets that are involved with the smart contract execution, those will be\npart of the test execution as well."),(0,o.kt)("p",null,"ink! does not put any requirements on the Substrate node in the background \u2013 for example,\nyou can run a node that contains a snapshot of a live network."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'#[ink_e2e::test]\nasync fn default_works(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {\n    // given\n    let constructor = FlipperRef::new_default();\n\n    // when\n    let contract_acc_id = client\n        .instantiate("flipper", &ink_e2e::bob(), constructor, 0, None)\n        .await\n        .expect("instantiate failed")\n        .account_id;\n\n    // then\n    let get = build_message::<FlipperRef>(contract_acc_id.clone())\n        .call(|flipper| flipper.get());\n    let get_res = client\n        .call(&ink_e2e::bob(), get, 0, None)\n        .await\n        .expect("get failed");\n    assert!(matches!(get_res.return_value(), false));\n\n    Ok(())\n}\n'))))}p.isMDXComponent=!0}}]);