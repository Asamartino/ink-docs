"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[7377],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(n),f=o,h=l["".concat(c,".").concat(f)]||l[f]||d[f]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},3351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={title:"useApi",description:"Get a api instance for a given chain"},i="useApi",s={unversionedId:"frontend/core/hooks/substrate/use-api",id:"frontend/core/hooks/substrate/use-api",title:"useApi",description:"Get a api instance for a given chain",source:"@site/docs/frontend/core/hooks/substrate/use-api.md",sourceDirName:"frontend/core/hooks/substrate",slug:"/frontend/core/hooks/substrate/use-api",permalink:"/es/frontend/core/hooks/substrate/use-api",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/core/hooks/substrate/use-api.md",tags:[],version:"current",frontMatter:{title:"useApi",description:"Get a api instance for a given chain"},sidebar:"reference",previous:{title:"useUninstalledWallets",permalink:"/es/frontend/core/hooks/wallets/use-uninstalled-wallets"},next:{title:"useBalance",permalink:"/es/frontend/core/hooks/substrate/use-balance"}},c={},p=[{value:"Return Type",id:"return-type",level:2}],u={toc:p},l="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"useapi"},"useApi"),(0,o.kt)("p",null,"A hook to get an ApiPromise and WsProvider instance for a given chain. These instances\nhave chain-specific RPC urls defined and will automatically update when you change your\nconfiguration or set a new default RPC for a chain. This hook is used in many ",(0,o.kt)("strong",{parentName:"p"},"useink"),"\nhooks. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useApi } from 'useink';\n\nexport const Api = ({ children }) => {\n  const { api } = useApi(); // Get the api instance for the default chain set in UseInkProvider\n  const alephApi = useApi('aleph'); // This assumes that 'aleph' config is added to UseInkProvider\n\n  console.log('default chain api', api)\n  console.log('aleph chain api', alephApi.api)\n\n  return <h1>Check the console logs...</h1>\n}\n")),(0,o.kt)("h2",{id:"return-type"},"Return Type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  api: ApiPromise;\n  provider: WsProvider;\n} | undefined\n")))}d.isMDXComponent=!0}}]);