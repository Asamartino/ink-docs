"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1437],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=o,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return t?r.createElement(m,i(i({ref:n},l),{},{components:t})):r.createElement(m,i({ref:n},l))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[p]="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2474:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=t(7462),o=(t(7294),t(3905));const a={title:"Configuration",description:"Learn about what configurations and defaults are available in useink"},i="Configuration",s={unversionedId:"frontend/configuration",id:"frontend/configuration",title:"Configuration",description:"Learn about what configurations and defaults are available in useink",source:"@site/docs/frontend/configuration.md",sourceDirName:"frontend",slug:"/frontend/configuration",permalink:"/es/frontend/configuration",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/configuration.md",tags:[],version:"current",frontMatter:{title:"Configuration",description:"Learn about what configurations and defaults are available in useink"},sidebar:"reference",previous:{title:"useBlockHeader",permalink:"/es/frontend/core/hooks/substrate/use-block-header"},next:{title:"decodeError",permalink:"/es/frontend/core/utils/contracts/decodeError"}},c={},u=[{value:"ConfigProps",id:"configprops",level:2},{value:"Adding a Custom Chain Config",id:"adding-a-custom-chain-config",level:2}],l={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(p,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"UseInkProvider")," takes props of type ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigProps"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { UseInkProvider } from 'useink';\nimport { RococoContractsTestnet } from 'useink/chains';\n\nfunction App({ children }) {\n  return (\n    <UseInkProvider config={{ chains: [RococoContractsTestnet] }}>\n      <MyRoutes />\n    </UseInkProvider>\n  );\n}\n\nexport default App\n")),(0,o.kt)("h2",{id:"configprops"},"ConfigProps"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export type ConfigProps = {\n  // dappName: This is the name that is displayed when a user first connects their wallet.\n  // It is also the key used for localStorage in some features.\n  dappName?: string; \n  // chains: see `useink/chains` for more chain configurations. \n  chains: ArrayOneOrMore<Chain>; \n  // events: contract emitted events \n  events?: { \n    // expiration: Time in miliseconds before an event is removed from state.\n    // This is used in the useEvent() hook for contracts\n    // Set to 0 to prevent events from being removed from state\n    // Default: 5000 (5 seconds)\n    expiration?: number; \n    // checkInterval: The amount of time to wait before checking which events need to be removed.\n    checkInterval?: number; \n  };\n  wallet?: {\n    // skipAutoConnect: Skip a dApp from using localStorage to restore a previously connected account\n    // Default: true\n    skipAutoConnect?: boolean; \n  };\n};\n")),(0,o.kt)("h2",{id:"adding-a-custom-chain-config"},"Adding a Custom Chain Config"),(0,o.kt)("p",null,"You can add your own chain config by modifying the ",(0,o.kt)("inlineCode",{parentName:"p"},"Custom")," chain config. e.g."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { UseInkProvider } from 'useink';\nimport { Custom, Chain } from 'useink/chains';\n\nconst MyChain: Chain = {\n  ...Custom,\n  // NOTE: The value of 'id' should be 'custom'. ChainId must be of a known value that we \n  // have already defined in useink/chains. We do this because chainId is used as an \n  // argument in many hooks and we want to prevent bugs due to mispelled chain names. \n  // For example: `useBlockHeader('astart')` would return undefined because `astart` \n  // is not a chainId. `astar` is the correct name. ChainId has known values so that \n  // TypeScript will show you your error before runtime.\n  id: 'custom', \n  name: 'My New Blockchain',\n  rpcs: ['wss://my-new-rpc.xyz'],\n}\n\n\nfunction App({ children }) {\n  return (\n    <UseInkProvider config={{ chains: [MyChain] }}>\n      <MyRoutes />\n    </UseInkProvider>\n  );\n}\n\nexport default App\n")),(0,o.kt)("p",null,"Using the above config you can call hooks with or without the ",(0,o.kt)("inlineCode",{parentName:"p"},"chainId")," as an argument. "),(0,o.kt)("p",null,"e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"useBlockHeaders()")," (defaults to 'custom') or ",(0,o.kt)("inlineCode",{parentName:"p"},"useBlockHeaders('custom')")))}d.isMDXComponent=!0}}]);