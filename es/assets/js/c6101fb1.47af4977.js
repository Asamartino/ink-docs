"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1139],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(n),f=o,h=p["".concat(s,".").concat(f)]||p[f]||d[f]||c;return n?r.createElement(h,a(a({ref:t},l),{},{components:n})):r.createElement(h,a({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=f;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:o,a[1]=i;for(var u=2;u<c;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9017:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));const c={title:"useContract",description:"A React hook for creating contract client instances scoped to a specific chain."},a="useContract",i={unversionedId:"frontend/core/hooks/contracts/use-contract",id:"frontend/core/hooks/contracts/use-contract",title:"useContract",description:"A React hook for creating contract client instances scoped to a specific chain.",source:"@site/docs/frontend/core/hooks/contracts/use-contract.md",sourceDirName:"frontend/core/hooks/contracts",slug:"/frontend/core/hooks/contracts/use-contract",permalink:"/es/frontend/core/hooks/contracts/use-contract",draft:!1,editUrl:"https://github.com/paritytech/ink-docs/edit/master/docs/frontend/core/hooks/contracts/use-contract.md",tags:[],version:"current",frontMatter:{title:"useContract",description:"A React hook for creating contract client instances scoped to a specific chain."},sidebar:"reference",previous:{title:"useCallSubscription",permalink:"/es/frontend/core/hooks/contracts/use-call-subscription"},next:{title:"useDryRun",permalink:"/es/frontend/core/hooks/contracts/use-dry-run"}},s={},u=[{value:"Usage",id:"usage",level:2},{value:"Return Value",id:"return-value",level:2}],l={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"usecontract"},"useContract"),(0,o.kt)("p",null,"This hook is the foundation for many other hooks in ",(0,o.kt)("strong",{parentName:"p"},"useink"),". It returns a\n",(0,o.kt)("inlineCode",{parentName:"p"},"ChainContract<T>")," type and will automatically set the RPC url for the chain you specify."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useContract } from 'useink'\n\nconst CONTRACT_ADDRESS = '..'\nconst ALEPH_CONTRACT_ADDRESS = '..'\n\nexport const MyContractView: React.FC = () => {\n  // The default chain will be used if you omit chainId as the third argument\n  // The default chain is the first item in the chain config for UseInkProvider\n  const contract = useContract(CONTRACT_ADDRESS, metadata)\n  const alephContract = useContract(ALEPH_CONTRACT_ADDRESS, metadata, 'aleph')\n\n  // use with other hooks...\n  // e.g. useCall, useCallSubscription, useTx, etc\n\n  return null\n}\n")),(0,o.kt)("h2",{id:"return-value"},"Return Value"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"{\n  // A contract object that contains metadata, and an api client set with a specific RPC url\n  contract: ChainContract<T>, \n  // A strongly typed chain name found in `useink/chains`\n  chainId: ChainId,\n} | undefined\n")))}d.isMDXComponent=!0}}]);