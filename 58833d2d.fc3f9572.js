(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{68:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(6),o=(n(0),n(90)),i={title:"Overview",slug:"/datastructures/custom"},s={unversionedId:"datastructures/overview",id:"datastructures/overview",isDocsHomePage:!1,title:"Overview",description:"In a sense it acts as the standard storage library for ink! smart contracts in that it provides all the",source:"@site/docs/datastructures/overview.md",slug:"/datastructures/custom",permalink:"/ink-docs/datastructures/custom",editUrl:"https://github.com/ink-docs/edit/master/docs/datastructures/overview.md",version:"current",sidebar:"reference",previous:{title:"Overview",permalink:"/ink-docs/ink-macros-attributes"},next:{title:"HashMap",permalink:"/ink-docs/datastructures/hashmap"}},l=[{value:"Lazy",id:"lazy",children:[]}],c={rightToc:l};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"In a sense it acts as the standard storage library for ink! smart contracts in that it provides all the\nnecessary tools and data structures to organize and operate the contract's storage intuitively and efficiently."),Object(o.b)("h3",{id:"lazy"},"Lazy"),Object(o.b)("p",null,"The most fundamental change in how you should think about data structures provided by the new ",Object(o.b)("inlineCode",{parentName:"p"},"ink_storage"),"\ncrate is that they are inherently lazy. We will explain what this means below!\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"ink_storage")," crate provides high-level and low-level lazy data structures.\nThe difference between high-level and low-level lies in the distinction in how these data structures are aware\nof the elements that they operate on. For high-level data structures they are fully aware about the elements\nthey contains, do all the clean-up by themselves so the user can concentrate on the business logic.\nFor low-level data structures the responsibility about the elements lies in the hands of the contract author.\nAlso they operate on cells (",Object(o.b)("inlineCode",{parentName:"p"},"Option<T>"),") instead of entities of type ",Object(o.b)("inlineCode",{parentName:"p"},"T"),".\nBut what does that mean exactly?"),Object(o.b)("p",null,"The new ",Object(o.b)("inlineCode",{parentName:"p"},"ink_storage::Lazy")," type is what corresponds the most to the old ",Object(o.b)("inlineCode",{parentName:"p"},"ink_core::storage::Value")," type. Both cache their entities and both act lazily on the storage. This means that a read or write operation is only performed when it really needs to in order to satisfy other inputs.\nData types such as Rust primitives ",Object(o.b)("inlineCode",{parentName:"p"},"i32")," or Rust's very own ",Object(o.b)("inlineCode",{parentName:"p"},"Vec")," or data structures can also be used to operate on the contract's storage, however, they will load their contents eagerly which is often not what you want."),Object(o.b)("p",null,"An example follows with the below contract storage and a message that operates on either of the two fields."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"#[ink(storage)]\npub struct TwoValues {\n    offset: i32,\n    a: i32,\n    b: i32,\n}\n\nimpl TwoValues {\n    #[ink(message)]\n    pub fn set(&mut self, which: bool, new_value: i32) {\n        match which {\n            true  => { self.a = self.offset + new_value; },\n            false => { self.b = self.offset + new_value; },\n        }\n    }\n}\n")),Object(o.b)("p",null,"Whenever we call ",Object(o.b)("inlineCode",{parentName:"p"},"TwoValues::set")," always both ",Object(o.b)("inlineCode",{parentName:"p"},"a")," and ",Object(o.b)("inlineCode",{parentName:"p"},"b")," are loaded despite the fact the we only operate on one of them at a time. This is very costly since storage accesses are in fact database look-ups.\nIn order to prevent this eager loading of storage contents we can make use of ",Object(o.b)("inlineCode",{parentName:"p"},"ink_storage::Lazy")," or other lazy data structures defined in that crate:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-rust"}),"#[ink(storage)]\npub struct TwoValues {\n    offset: i32,\n    a: ink_storage::Lazy<i32>,\n    b: ink_storage::Lazy<i32>,\n}\n\nimpl TwoValues {\n    #[ink(message)]\n    pub fn set(&mut self, which: bool, new_value: i32) {\n        match which {\n            true  => { self.a = offset + new_value; },\n            false => { self.b = offset + new_value; },\n        }\n    }\n}\n")),Object(o.b)("p",null,"Now ",Object(o.b)("inlineCode",{parentName:"p"},"a")," and ",Object(o.b)("inlineCode",{parentName:"p"},"b")," are only loaded when the contract really needs their values.\nNote that ",Object(o.b)("inlineCode",{parentName:"p"},"offset")," remained ",Object(o.b)("inlineCode",{parentName:"p"},"i32")," since it is always needed and could spare the minor overhead of the ",Object(o.b)("inlineCode",{parentName:"p"},"ink_storage::Lazy")," wrapper."))}u.isMDXComponent=!0},90:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),u=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=u(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(n),b=a,h=p["".concat(i,".").concat(b)]||p[b]||d[b]||o;return n?r.a.createElement(h,s(s({ref:t},c),{},{components:n})):r.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);